//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

//By considering the terms in the Fibonacci sequence whose values
//do not exceed four million, find the sum of the even-valued terms.

//write a function that takes a number
// write a for loop based on this number
//create variables for the numbers that are around it

var myFibArray = []
myFibArray[0] = 0
myFibArray[1] = 1


for (var i = 2; i <= 10; i++) {
  myFibArray[i] = myFibArray[i - 2] + myFibArray[i - 1];
}

var evenArray = []
for (var i = 1; i < myFibArray.length; i++) {
  if (myFibArray[i] % 2 === 0) {
    evenArray.push(myFibArray[i]);
  }
}
console.log(evenArray.reduce(function(x, y) {
  return x + y;
}));

// console.log(evenArray)
  // var myFibArray = [1,2,3,4,5,6,7,8,9,10,11,12,13]
  //
  // var fibNum = myFibArray.map(function(num){
  //   var x = num-1
  //   return x + num + num-1 ;
  // })
  //
  // console.log(fibNum)


// for(var i = 1; i < 90; i++){
//   var newNumList = i + i;
//   console.log(newNumList)
// }







// If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.



// create an empty array
// var multArray = []
// //loop through all number 1 -1000
// for(var i = 1; i < 1000; i++){
//   //if the number is divisble by 3 push it to an array
//   //if the number is divisble by 5 push it to an array
//   if(i % 3 == 0 || i % 5 == 0){
//     multArray.push(i);
//   }
// }
// function getSum(x,y){
//   return x+y;
// }
// //use the reduce method on the array to find the sum of these numbers
// console.log(multArray.reduce(getSum))
